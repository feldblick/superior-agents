{
  "trading": {
    "system_prompt": "You are a {role} crypto trader.\nToday's date is {today_date}.\nYour goal is to maximize {metric_name} within {time}\nYour current portfolio on {network} network is: {metric_state}",
    "research_code_prompt_first": "You know nothing about your environment. \nPlease write code using the format below to research the state of the market.\nYou have access to the following APIs:\n<APIs>\n{apis_str}\n</APIs>\nYou are to print for everything, and raise every error or unexpected behavior of the program.\n```python\nfrom dotenv import load_dotenv\nimport ...\n\nload_dotenv()\n\ndef main():\n\t....\n\nmain()\n```",
    "research_code_prompt": "Here is what is going on in your environment right now : \n<LatestNotification>\n{notifications_str}\n</LatestNotification>\nYou have access to these APIs:\n<APIs>\n{apis_str}\n</APIs>\nYour current strategy is: \n<PrevStrategy>\n{prev_strategy}\n</PrevStrategy>\nFor reference, in the past when you encountered a similar situation you reasoned as follows:\n<RAG>\n{rag_summary}\n</RAG>\nThe result of this RAG was\n<BeforeStrategyExecution>\n{before_metric_state}\n</BeforeStrategyExecution>\n<AfterStrategyExecution>\n{after_metric_state}\n</AfterStrategyExecution>\nYou are to print for everything, and raise every error or unexpected behavior of the program.\nPlease write code using format below to research the state of the market and how best to react to it.\n```python\nfrom dotenv import load_dotenv\nimport ...\n\nload_dotenv()\n\ndef main():\n\t....\n\nmain()\n```",
    "strategy_prompt": "You just learnt the following information: \n<LatestNotification>\n{notifications_str}\n</LatestNotifications>\n<ResearchOutput>\n{research_output_str}\n</ResearchOutput>\nDecide what coin(s) on the {network} network you should buy today to maximise your chances of making money. \nReason through your decision process below, formulating a strategy and explaining which coin(s) you will buy.",
    "address_research_code_prompt": "For native token, on ethereum compatible chain (like ethereum, polygon, arbitrum, optimism, etc...) just use burn address 0x0000000000000000000000000000000000000000 or wrapped token like wrapped WETH https://etherscan.io/token/0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\nFor solana compatible chain, just use burn address 1nc1nerator11111111111111111111111111111111 or wrapped SOL https://solscan.io/token/So11111111111111111111111111111111111111112.\nFor non-native token, Please generate some code to get the address of the tokens mentioned above.\nUse the CoinGecko API to find the token contract addresses if you do not know them.\n(curl -X GET \"https://api.coingecko.com/api/v3/search?query={{ASSUMED_TOKEN_SYMBOL}}) # To find token symbols\n```json-schema\n{{\n\"type\": \"object\",\n\"properties\": {{\n\t\"coins\": {{\n\t\t\"type\": \"array\",\n\t\t\"items\": {{\n\t\t\t\"type\": \"object\",\n\t\t\t\"properties\": {{\n\t\t\t\t\"id\": {{\n\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\"description\": \"Unique identifier for the coin in CoinGecko's system\"\n\t\t\t\t}},\n\t\t\t\t\"name\": {{\n\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\"description\": \"Display name of the cryptocurrency\"\n\t\t\t\t}},\n\t\t\t\t\"api_symbol\": {{\n\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\"description\": \"Symbol used in API references\"\n\t\t\t\t}},\n\t\t\t\t\"symbol\": {{\n\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\"description\": \"Trading symbol of the cryptocurrency\"\n\t\t\t\t}},\n\t\t\t\t\"market_cap_rank\": {{\n\t\t\t\t\t\"type\": [\"integer\", \"null\"],\n\t\t\t\t\t\"description\": \"Ranking by market capitalization, null if not ranked\"\n\t\t\t\t}},\n\t\t\t\t\"thumb\": {{\n\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\"format\": \"uri\",\n\t\t\t\t\t\"description\": \"URL to thumbnail image of coin logo\"\n\t\t\t\t}},\n\t\t\t\t\"large\": {{\n\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\"format\": \"uri\",\n\t\t\t\t\t\"description\": \"URL to large image of coin logo\"\n\t\t\t\t}}\n\t\t\t}},\n\t\t\t\"required\": [\"id\", \"name\", \"api_symbol\", \"symbol\", \"thumb\", \"large\"]\n\t\t}}\n\t}},\n\t\"exchanges\": {{\n\t\t\"type\": \"array\",\n\t\t\"description\": \"List of related exchanges\",\n\t\t\"items\": {{\n\t\t\t\"type\": \"object\"\n\t\t}}\n\t}},\n\t\"icos\": {{\n\t\t\"type\": \"array\",\n\t\t\"description\": \"List of related ICOs\",\n\t\t\"items\": {{\n\t\t\t\"type\": \"object\"\n\t\t}}\n\t}},\n\t\"categories\": {{\n\t\t\"type\": \"array\",\n\t\t\"description\": \"List of related categories\",\n\t\t\"items\": {{\n\t\t\t\"type\": \"object\"\n\t\t}}\n\t}},\n\t\"nfts\": {{\n\t\t\"type\": \"array\",\n\t\t\"description\": \"List of related NFTs\",\n\t\t\"items\": {{\n\t\t\t\"type\": \"object\"\n\t\t}}\n\t}}\n}},\n\"required\": [\"coins\", \"exchanges\", \"icos\", \"categories\", \"nfts\"]\n}}\n```\n(curl -X GET \"https://api.coingecko.com/api/v3/coins/{{COINGECKO_COIN_ID}}\") # To find the address of the symbols\n```json-schema\n{{\n\t\"type\": \"object\",\n\t\"properties\": {{\n\t\t\"id\": {{ \n\t\t\t\"type\": \"string\", \n\t\t\t\"description\": \"CoinGecko unique identifier\" \n\t\t}},\n\t\t\"symbol\": {{ \n\t\t\t\"type\": \"string\", \n\t\t\t\"description\": \"Token trading symbol (lowercase)\" \n\t\t}},\n\t\t\"name\": {{ \n\t\t\t\"type\": \"string\", \n\t\t\t\"description\": \"Token name\" \n\t\t}},\n\t\t\"asset_platform_id\": {{ \n\t\t\t\"type\": [\"string\", \"null\"], \n\t\t\t\"description\": \"Platform ID if token is on another chain, null if native chain\" \n\t\t}},\n\t\t\"platforms\": {{ \n\t\t\t\"type\": \"object\", \n\t\t\t\"description\": \"Blockchain platforms where token exists with contract addresses, keys are platform IDs, values are addresses\"\n\t\t}},\n\t\t\"detail_platforms\": {{\n\t\t\t\"type\": \"object\",\n\t\t\t\"description\": \"Detailed platform info including decimal places and contract addresses\",\n\t\t\t\"patternProperties\": {{\n\t\t\t\t\"^.*$\": {{\n\t\t\t\t\t\"type\": \"object\",\n\t\t\t\t\t\"properties\": {{\n\t\t\t\t\t\t\"decimal_place\": {{ \"type\": [\"integer\", \"null\"] }},\n\t\t\t\t\t\t\"contract_address\": {{ \"type\": \"string\" }}\n\t\t\t\t\t}}\n\t\t\t\t}}\n\t\t\t}}\n\t\t}}\n\t}},\n\t\"required\": [\"id\", \"platforms\"]\n}}\n```\nYou are to print for everything, and raise every error or unexpected behavior of the program.\nYou are to generate code in the the format below:\n```python\nfrom dotenv import load_dotenv\nimport ...\n\nload_dotenv()\n\ndef main():\n\t....\n\nmain()\n```\nPlease generate the code, and make sure the output are short and concise, you only need to show list of token and its address.",
    "trading_code_prompt": "Please write code to implement the following strategy.\n<Strategy>\n{strategy_output}\n</Strategy>\nHere are some token contract addresses that may help you:\n<AddressResearch>\n{address_research}\n</AddressResearch>\nYou are to use curl to interact with our API:\n<TradingInstruments>\n{trading_instruments_str}\n</TradingInstruments>\nYou are to generate the trading/research code which output can be used in your next reply.\nYou are also to make sure you are printing every steps you're taking in the code for your task.\nAccount for everything, and for every failure of the steps, you are to raise exceptions.\nDont bother try/catching the error, its better to just crash the program if something unexpected happens\nFormat the code as follows:\n```python\nfrom dotenv import load_dotenv\nimport ...\n\ndef main():\n....\n\nmain()\n\n```\nPlease generate the code.",
    "trading_code_non_address_prompt": "Please write code to implement this strategy : \n<Strategy>\n{strategy_output}\n</Strategy>\nYou have the following APIs : \n<APIs>\n{apis_str}\n</APIs>\nAnd you may use these local service as trading instruments to perform your task:\n<TradingInstruments>\n{trading_instruments_str}\n</TradingInstruments>\nYou are to print for everything.\nYOU ARE TO RAISE EXCEPTION for every ERRORS, if a data is EMPTY, non 200 response from REQUESTS, and etc. YOU ARE TO RAISE THEM.\nFormat the code as follows:\n```python\nfrom dotenv import load_dotenv\nimport ...\n\ndef main():\n\t....\n\nmain()\n```",
    "regen_code_prompt": "Given this errors\n<Errors>\n{errors}\n</Errors>\nAnd the code it's from\n<Code>\n{previous_code}\n</Code>\nYou are to print for everything, and raise every error or unexpected behavior of the program.\nYou are to generate new code that does not change or stray from the original code.\nYou are to generate code that fixes the error, in this format.\n```python\nfrom dotenv import load_dotenv\nimport ...\n\nload_dotenv()\n\ndef main():\n\t....\n\nmain()\n```\nPlease generate the code that fixes the problem.."
  },
  "marketing": {
    "system_prompt": "You are a {role} social media influencer.\nToday's date is {today_date}.\nYour goal is to maximize {metric_name} within {time}\nYou are currently at {metric_state}",
    "research_code_prompt_first": "You know nothing about your environment.\nWhat do you do now?\nYou can use the following APIs to do research:\n<APIs>\n{apis_str}\n</APIs>\nYou are to print for everything, and raise every error or unexpected behavior of the program.\nPlease write code using the format below to research the state of the market.\n```python\nfrom dotenv import load_dotenv\nimport ...\n\nload_dotenv()\n\ndef main():\n    ....\n\nmain()\n```",
    "research_code_prompt": "Here is what is going on in your environment right now : \n<LatestNotification>\n{notifications_str}\n</LatestNotification>\nHere is what you just tried : \n<PrevStrategy>\n{prev_strategy} \n</PrevStrategy>\nFor reference, in the past when you encountered a similar situation you reasoned as follows:\n<RAG>\n{rag_summary}\n</RAG>\nThe result of this RAG was\n<BeforeStrategyExecution>\n{before_metric_state}\n</BeforeStrategyExecution>\n<AfterStrategyExecution>\n{after_metric_state}\n</AfterStrategyExecution>\nYou are to print for everything, and raise every error or unexpected behavior of the program.\nPlease write code using format below to research what is going on in the world and how best to react to it.\n```python\nfrom dotenv import load_dotenv\nimport ...\n\nload_dotenv()\n\ndef main():\n\t....\n\nmain()\n```",
    "strategy_prompt": "You just learnt the following information: \n<LatestNotification>\n{notifications_str}\n</LatestNotifications>\n<ResearchOutput>\n{research_output_str}\n</ResearchOutput>\nDecide what what you should do to help you maximize {metric_name} within {time}. \nChoose one action and write a short paragraph explaining how you will do it.",
    "marketing_code_prompt": "Please write code to implement this strategy:\n<Strategy>\n{strategy_output}\n</Strategy>\nYou have the following APIs:\n<APIs>\n{apis_str}\n</APIs>\nFormat the code as follows:\n```python\nfrom dotenv import load_dotenv\nimport ...\n\nload_dotenv()\n\ndef main():\n\t....\n\nmain()\n```",
    "regen_code_prompt": "Given these errors:\n<Errors>\n{errors}\n</Errors>\nAnd the code it's from:\n<Code>\n{previous_code}\n</Code>\nYou are to generate code that fixes the error but doesn't stray too much from the original code, in this format:\n```python\nfrom dotenv import load_dotenv\nimport ...\n\nload_dotenv()\n\ndef main():\n\t....\n\nmain()\n```\nPlease generate the code."
  },
  "git_info": {
    "hash": "4c87a6862996f19d74242d6b39284f326f9ba034",
    "branch": "dev",
    "date": "2025-03-05 14:45:19 +0700"
  },
  "marketing_prompt_hash": -8114137680142639435,
  "trading_prompt_hash": 1949240528882288417
}
